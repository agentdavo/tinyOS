# SPDX-License-Identifier: MIT OR Apache-2.0
# .github/workflows/ci.yml - CI pipeline for miniOS v1.7
# Builds, tests, and analyzes miniOS on ARM64 and RISC-V in QEMU
# @version 1.7

name: miniOS CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-and-test:
    runs-on: ubuntu-22.04  # Pin to Ubuntu 22.04 for stability
    strategy:
      matrix:
        arch: [ arm64, riscv64 ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache dependencies and toolchains
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/apt
            /usr/bin/aarch64-linux-gnu-*
            /usr/bin/riscv64-linux-gnu-*
            /usr/lib/aarch64-linux-gnu
            /usr/lib/riscv64-linux-gnu
          key: ${{ runner.os }}-apt-toolchains-${{ hashFiles('.github/workflows/ci.yml') }}
          restore-keys: ${{ runner.os }}-apt-toolchains-

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --allow-downgrades \
            build-essential \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu binutils-aarch64-linux-gnu \
            gcc-riscv64-linux-gnu g++-riscv64-linux-gnu binutils-riscv64-linux-gnu \
            qemu-system-arm qemu-system-riscv64 clang-tidy bear doxygen gdb-multiarch

      - name: Validate linker script
        run: |
          ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-ld' || 'riscv64-linux-gnu-ld' }} --verbose -T ld/linker_arm64.ld

      - name: Generate compilation database
        run: bear -- make clean TARGET=${{ matrix.arch }}

      - name: Run static analysis
        run: |
          find . -type f \( -name "*.cpp" -o -name "*.hpp" \) -exec clang-tidy --quiet -p compile_commands.json {} \;

      - name: Build minimal kernel (${{ matrix.arch }})
        run: make kernel TARGET=${{ matrix.arch }}

      - name: Verify ELF integrity (${{ matrix.arch }})
        run: |
          ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-readelf' || 'riscv64-linux-gnu-readelf' }} -l miniOS_kernel.elf > elf_headers.txt
          grep "VirtAddr.*0x40000000" elf_headers.txt  # Check .text segment
          grep "VirtAddr.*0x40100000" elf_headers.txt  # Check .data segment
          ${{ matrix.arch == 'arm64' && 'aarch64-linux-gnu-objdump' || 'riscv64-linux-gnu-objdump' }} -h miniOS_kernel.elf > section_mappings.txt
          grep ".text.*0x40000000" section_mappings.txt
          grep ".data.*0x40100000" section_mappings.txt

      - name: Run tests in QEMU (${{ matrix.arch }})
        run: |
          timeout 60s sh -c 'echo -e "test\n" | ${{ matrix.arch == "arm64" && "qemu-system-aarch64 -M virt -cpu cortex-a53 -smp 4 -m 128M -nographic -kernel miniOS_kernel.elf" || "qemu-system-riscv64 -M virt -cpu rv64 -smp 4 -m 128M -nographic -kernel miniOS_kernel.elf" }}' > test_output.txt 2>&1 || true
          cat test_output.txt
          grep "Tests completed:.*0 failed" test_output.txt || { echo "Tests failed or incomplete"; exit 1; }

      - name: Debug with GDB (${{ matrix.arch }})
        run: |
          echo "set architecture ${{ matrix.arch == 'arm64' && 'aarch64' || 'riscv:rv64' }}" > gdb_init_ci.gdb
          echo "target remote localhost:1234" >> gdb_init_ci.gdb
          echo "break kernel_main" >> gdb_init_ci.gdb
          echo "continue" >> gdb_init_ci.gdb
          echo "quit" >> gdb_init_ci.gdb
          timeout 60s sh -c '${{ matrix.arch == "arm64" && "qemu-system-aarch64 -M virt -cpu cortex-a53 -smp 4 -m 128M -nographic -kernel miniOS_kernel.elf -S -s" || "qemu-system-riscv64 -M virt -cpu rv64 -smp 4 -m 128M -nographic -kernel miniOS_kernel.elf -S -s" }}' > qemu_debug.txt 2>&1 &
          sleep 5
          gdb-multiarch -q -x gdb_init_ci.gdb miniOS_kernel.elf > gdb_output.txt 2>&1
          cat gdb_output.txt
          grep "Breakpoint.*kernel_main" gdb_output.txt || { echo "GDB failed to hit kernel_main"; exit 1; }
          pkill -f qemu-system || true

      - name: Generate documentation
        run: doxygen Doxyfile

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: miniOS-${{ matrix.arch }}
          path: |
            miniOS_kernel.elf
            miniOS.bin
            test_output.txt
            elf_headers.txt
            section_mappings.txt
            qemu_debug.txt
            gdb_output.txt
            docs/html/
            compile_commands.json