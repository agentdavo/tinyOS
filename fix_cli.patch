--- a/cli.cpp
+++ b/cli.cpp
@@ -21,7 +21,7 @@
  * @see cli.hpp, miniOS.hpp, util.hpp
  */
 
-#include "miniOS.hpp" // Include the core kernel header first (defines GPIO_BANKS, MAX_NAME_LENGTH etc. globally)
+#include "miniOS.hpp" // Include the core kernel header first
 #include "util.hpp"   // For kernel::util functions
 
 #include "cli.hpp"    // Then its own header
@@ -205,13 +205,13 @@
 
                 // Add to history
                 if (history_count_ < MAX_HISTORY) {
-                    kernel::util::kmemcpy(command_history_[history_count_].data(), cmd_buffer_.data(), cmd_buffer_idx_ + 1);
+                    ::kernel::util::kmemcpy(command_history_[history_count_].data(), cmd_buffer_.data(), cmd_buffer_idx_ + 1);
                     history_count_++;
                 } else { 
                     for (size_t i = 1; i < MAX_HISTORY; ++i) {
                         command_history_[i - 1] = command_history_[i];
                     }
-                    kernel::util::kmemcpy(command_history_[MAX_HISTORY - 1].data(), cmd_buffer_.data(), cmd_buffer_idx_ + 1);
+                    ::kernel::util::kmemcpy(command_history_[MAX_HISTORY - 1].data(), cmd_buffer_.data(), cmd_buffer_idx_ + 1);
                 }
                 history_idx_ = history_count_; 
 
@@ -241,10 +241,10 @@
 // --- Built-in Command Implementations ---
 static int cli_help_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
     if (!uart_ops) return -1;
-    if (args && kernel::util::strlen(args) > 0) {
+    if (args && ::kernel::util::strlen(args) > 0) {
         for (size_t i = 0; i < CLI::g_num_commands.load(std::memory_order_relaxed); ++i) {
-            if (CLI::g_commands[i].name && kernel::util::strcmp(CLI::g_commands[i].name, args) == 0) {
+            if (CLI::g_commands[i].name && ::kernel::util::strcmp(CLI::g_commands[i].name, args) == 0) {
                 uart_ops->puts(args); 
                 if (CLI::g_commands[i].help_text) {
                     uart_ops->puts(": ");
@@ -299,7 +299,7 @@
 // --- Filesystem Command Implementations ---
 static int cli_fs_ls_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
     if (!uart_ops) return -1;
-    const char* path_to_list = (args && kernel::util::strlen(args) > 0) ? args : "/";
+    const char* path_to_list = (args && ::kernel::util::strlen(args) > 0) ? args : "/";
     if (!kernel::g_file_system.list_files(path_to_list, uart_ops)) {
         uart_ops->puts("Error listing directory.\n");
         return -1;
@@ -406,7 +406,7 @@
         return -1;
     }
     uint32_t ip_addr_val;
-    if (kernel::util::ipv4_to_uint32(args, ip_addr_val)) {
+    if (::kernel::util::ipv4_to_uint32(args, ip_addr_val)) {
         net::IPv4Addr target_ip{ip_addr_val};
         kernel::g_net_manager.ping(target_ip, 3, uart_ops); 
     } else {
@@ -427,10 +427,10 @@
         // ... print port and channels
         uart_ops->puts("\nTo use, add and configure 'netaudio' DSP node.\n");
 
-        if (kernel::util::strcmp(mode, "sink") == 0 && kernel::g_net_manager.is_initialized()) {
+        if (::kernel::util::strcmp(mode, "sink") == 0 && kernel::g_net_manager.is_initialized()) {
             uint32_t ip_val;
-            if (kernel::util::ipv4_to_uint32(ip_str, ip_val) && port > 0 && port <= 65535 && channels > 0) {
+            if (::kernel::util::ipv4_to_uint32(ip_str, ip_val) && port > 0 && port <= 65535 && channels > 0) {
                 net::IPv4Addr ip{ip_val};
                 net::Packet packet{.dst_ip = ip, .dst_port = static_cast<uint16_t>(port), .src_ip={}, .src_port=0, .timestamp_us=0, .data={}, .data_len = 0, .priority=0, .audio_channels = static_cast<uint8_t>(channels)};
                 packet.data_len = snprintf(reinterpret_cast<char*>(packet.data.data()), packet.data.size(), "TestNetAudio");
@@ -466,7 +466,7 @@
         return -1;
     }
     char type_str[32] = {0};
-    char name_str[MAX_NAME_LENGTH] = {0}; // Use global MAX_NAME_LENGTH
+    char name_str[MAX_NAME_LENGTH] = {0}; // Use global MAX_NAME_LENGTH (no kernel:: prefix)
 
     if (std::sscanf(args, "%31s %31s", type_str, name_str) == 2) {
         std::string_view type_sv(type_str);
@@ -504,7 +504,7 @@
         }
 
         if (node_ptr) {
-            if (kernel::g_audio_system.get_dsp_graph().add_node(std::move(node_ptr))) {
+            if (kernel::g_audio_system.get_dsp_graph().add_node(std::move(node_ptr))) { // Corrected call
                 if (uart_ops) {
                     uart_ops->puts("DSP node added: ");
                     uart_ops->puts(name_str);
@@ -523,12 +523,12 @@
 }
 
 static int cli_dsp_remove(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
-    if (!uart_ops || !args || kernel::util::strlen(args) == 0) {
+    if (!uart_ops || !args || ::kernel::util::strlen(args) == 0) {
         if (uart_ops) uart_ops->puts("Usage: dsprm <name>\n");
         return -1;
     }
     std::string_view name_sv(args);
-    if (kernel::g_audio_system.get_dsp_graph().remove_node(name_sv)) {
+    if (kernel::g_audio_system.get_dsp_graph().remove_node(name_sv)) { // Corrected call
         if (uart_ops) {
             uart_ops->puts("DSP node removed: ");
             uart_ops->puts(args);
@@ -567,7 +567,7 @@
     
     std::string name_to_config_cstr(name_to_config_sv); 
 
-    if (kernel::g_audio_system.get_dsp_graph().configure_node(name_to_config_cstr.c_str(), config_args_for_node_ptr, uart_ops)) {
+    if (kernel::g_audio_system.get_dsp_graph().configure_node(name_to_config_cstr.c_str(), config_args_for_node_ptr, uart_ops)) { // Corrected call
         // Silence, configure_node should provide feedback.
     } else {
         // Silence, configure_node should provide feedback.
@@ -580,7 +580,7 @@
     if (!uart_ops) {
         return -1;
     }
-    kernel::g_audio_system.get_dsp_graph().reset();
+    kernel::g_audio_system.get_dsp_graph().reset(); // Corrected call
     if (uart_ops) {
         uart_ops->puts("DSP graph reset.\n");
     }
@@ -605,7 +605,7 @@
 }
 
 static int cli_fs_cat_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
-    if (!uart_ops || !args || kernel::util::strlen(args) == 0) {
+    if (!uart_ops || !args || ::kernel::util::strlen(args) == 0) {
         if(uart_ops) { uart_ops->puts("Usage: cat <filepath>\n"); }
         return -1;
     }
@@ -620,25 +620,25 @@
 }
 
 static int cli_fs_mkfile_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
-    if(!uart_ops || !args || kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: mkfile <filepath>\n"); } return -1; }
+    if(!uart_ops || !args || ::kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: mkfile <filepath>\n"); } return -1; }
     if(kernel::g_file_system.create_file(args, false)) uart_ops->puts("File created.\n");
     else uart_ops->puts("Error creating file.\n");
     return 0;
 }
 static int cli_fs_mkdir_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
-    if(!uart_ops || !args || kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: mkdir <path>\n"); } return -1; }
+    if(!uart_ops || !args || ::kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: mkdir <path>\n"); } return -1; }
     if(kernel::g_file_system.create_file(args, true)) uart_ops->puts("Directory created.\n"); 
     else uart_ops->puts("Error creating directory.\n");
     return 0;
 }
 static int cli_fs_rm_command(const char* args, kernel::hal::UARTDriverOps* uart_ops) {
-    if(!uart_ops || !args || kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: rm <path>\n"); } return -1; }
+    if(!uart_ops || !args || ::kernel::util::strlen(args) == 0) { if(uart_ops) { uart_ops->puts("Usage: rm <path>\n"); } return -1; }
     if(kernel::g_file_system.delete_file(args)) uart_ops->puts("File/directory removed.\n");
     else uart_ops->puts("Error removing file/directory.\n");
     return 0;
 }
 
@@ -657,13 +657,13 @@
     char ip_str[16]; int port; char data_str[128]; 
     if(std::sscanf(args, "%15s %d %127s", ip_str, &port, data_str) == 3) {
         uint32_t ip_val;
-        if(kernel::util::ipv4_to_uint32(ip_str, ip_val) && port > 0 && port <= 65535) {
+        if(::kernel::util::ipv4_to_uint32(ip_str, ip_val) && port > 0 && port <= 65535) {
             net::IPv4Addr dst_ip{ip_val};
             net::Packet p;
             p.dst_ip = dst_ip;
             p.dst_port = static_cast<uint16_t>(port);
-            p.data_len = kernel::util::strlen(data_str);
-            if (p.data_len > p.data.size()) p.data_len = p.data.size(); // Prevent overflow
-            kernel::util::kmemcpy(p.data.data(), data_str, p.data_len);
+            p.data_len = ::kernel::util::strlen(data_str);
+            if (p.data_len >= p.data.size()) p.data_len = p.data.size() -1; // Prevent overflow, leave room for null if C-string like
+            ::kernel::util::kmemcpy(p.data.data(), data_str, p.data_len);
             
             int sock_idx = kernel::g_net_manager.create_udp_socket(net::IPv4Addr{0}, 0); 
             if (sock_idx >= 0) {
--- a/cli.hpp
+++ b/cli.hpp
@@ -104,16 +104,17 @@
         // If we had an instance:
         // void handle_char(char c, kernel::hal::UARTDriverOps* uart_ops);
         // void complete_command(kernel::hal::UARTDriverOps* uart_ops); // Tab completion (future)
-        // void navigate_history(bool up, kernel::hal::UARTDriverOps* uart_ops); // Arrow key history
+        // void navigate_history(bool up, kernel::hal::UARTDriverOps* uart_ops); // Arrow key history    
 
+public: // Make these public so free functions like cli_help_command and cli_history_command can access them.
     // Static members for command registration and global CLI state
     static std::array<Command, MAX_COMMANDS> g_commands; ///< Registered commands
     static std::atomic<size_t> g_num_commands;           ///< Number of registered commands
     
     // Made these static to be accessible from static cli_thread_entry and cli_history_command
     static std::array<char, MAX_COMMAND_LENGTH> cmd_buffer_; 
-    static size_t cmd_buffer_idx_; 
+    static size_t cmd_buffer_idx_;
     static std::array<std::array<char, MAX_COMMAND_LENGTH>, MAX_HISTORY> command_history_; 
     static size_t history_idx_; 
-    static size_t history_count_; 
+    static size_t history_count_;
 };
 } // namespace cli
 #endif // CLI_HPP
